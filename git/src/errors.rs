#[derive(Debug, PartialEq)]
/// Enumeración que representa los posibles errores que pueden ocurrir durante la ejecución
/// del programa Git.
///
/// Cada variante de este enum representa un tipo específico de error que puede ocurrir, y
/// se utiliza para identificar y manejar los errores de manera adecuada.
///
pub enum GitError {
    MissingConfigPathError,
    ConfigFileError,
    InvalidConfigFormatError,
    InvalidArgumentCountError,
    InvalidConfigurationValueError,
    InvalidUserNameError,
    InvalidUserMailError,
    InvalidPortError,
    InvalidLogDirectoryError,
    InvalidIpError,
    ServerConnectionError,
    ClientConnectionError,
    InvalidPacketLineError,
    InvalidServerReferenceError,
    InvalidVersionNumberError,
    InvalidObjectIdError,
    GenericError, // Error genérico, lo uso para tests.
    UploadRequest,
    PackfileNegotiationNACK,
    ObjectBuildFailed,
    GtkFailedInitiliaze,
    OpenFileError,
    ReadFileError,
    CreateFileError,
    WriteFileError,
    CopyFileError,
    CreateDirError,
    ReadBranchesError,
    BranchDirectoryOpenError,
    BranchAlreadyExistsError,
    BranchFileCreationError,
    BranchFileWriteError,
    DeleteBranchError,
    BranchDoesntExistError,
    BranchNotFoundError,
    HashObjectInvalid,
    DecompressionFailed,
    RemoteDoesntExistError,
    WriteStreamError,
    SendCommandError,
    HeaderPackFileReadError,
    HeadBranchError,
    VisitDirectoryError,
    GetHashError,
    ReadDirError,
    DirEntryError,
    PathToStringError,
    InvalidObjectType,
    InvalidObjectLength,
    NonGitCommandError,
    CommandNotRecognizedError,
    InvalidArgumentCountAddError,
    DirectoryOpenError,
    InvalidArgumentCountBranchError,
    InvalidArgumentCountCatFileError,
    FlagCatFileNotRecognizedError,
    InvalidArgumentCountCheckoutError,
    FlagCheckoutNotRecognisedError,
    InvalidArgumentCountCloneError,
    InvalidArgumentCountCommitError,
    FlagCommitNotRecognizedError,
    InvalidArgumentCountFetchError,
    InvalidArgumentCountHashObjectError,
    FlagHashObjectNotRecognizedError,
    InvalidArgumentCountInitError,
    InvalidArgumentCountStatusError,
    CloneMissingRepoError,
    InvalidArgumentCountLogError,
    InvalidArgumentCountMergeError,
    InvalidArgumentCountPullError,
    InvalidArgumentCountPushError,
    InvalidArgumentCountRemoteError,
    InvalidArgumentCountRmError,
    PackObjectReadError,
    LogOutputOpenError,
    LogOutputSyncError,
}

impl GitError {
    /// Obtiene el mensaje descriptivo correspondiente al error actual.
    ///
    /// Esta función devuelve un mensaje de error descriptivo basado en el tipo de error que
    /// se ha producido. Los mensajes de error proporcionados son informativos y ayudan a
    /// identificar la causa del error.
    ///
    /// # Return
    ///
    /// Un valor `&str` que contiene el mensaje descriptivo del error actual.
    ///
    pub fn message(&self) -> &str {
        match self {
            GitError::ConfigFileError => "No se pudo abrir el archivo de configuración.",
            GitError::MissingConfigPathError => "No se ha especificado la ruta del archivo de configuración.\nUse: cargo run --bin <mode> -- <path config>",
            GitError::InvalidArgumentCountError => "Número de argumentos inválido.\nUse: cargo run -- <path config>",
            GitError::InvalidConfigFormatError => "Formato de archivo de configuración inválido. Format: key=value",
            GitError::InvalidConfigurationValueError => "Valor de configuración inválido, revise su archivo de configuración.",
            GitError::InvalidUserNameError => "Nombre de usuario inválido, revise su archivo de configuración.",
            GitError::InvalidUserMailError => "Correo de usuario inválido, revise su archivo de configuración.",
            GitError::InvalidPortError => "Puerto inválido, revise su archivo de configuración.",
            GitError::InvalidLogDirectoryError => "Directorio de logs inválido, revise su archivo de configuración.",
            GitError::InvalidIpError => "Dirección IP inválida, revise su archivo de configuración.",
            GitError::ServerConnectionError => "No se pudo conectar al servidor.",
            GitError::ClientConnectionError => "No se pudo conectar el cliente.",
            GitError::GenericError => "Error generico.",
            GitError::InvalidPacketLineError => "Error al leer una línea de paquete.",
            GitError::InvalidVersionNumberError => "Número de versión inválido, solo se acepta v1 y v2.",
            GitError::InvalidServerReferenceError => "Referencia no reconocida por el servidor.",
            GitError::InvalidObjectIdError => "Se encontro un object id no valido del servidor.",
            GitError::UploadRequest => "NO se pudo completar el pedido para la negociacion con el servidor",
            GitError::PackfileNegotiationNACK => "La negocion fallo porque no se recibio el NACK del servidor",
            GitError::ObjectBuildFailed => "No se pudo obtener el objeto del constructor.",
            GitError::GtkFailedInitiliaze => "No se pudo inicializar GTk",
            GitError::OpenFileError => "No se pudo abrir el archivo",
            GitError::ReadFileError => "No se pudo leer el archivo",
            GitError::ReadBranchesError => "No se pudieron leer las branchs del repositorio.",
            GitError::BranchDirectoryOpenError => "No se pudo abrir el directorio de branchs.",
            GitError::BranchAlreadyExistsError => "fatal: la rama ya existe",
            GitError::BranchFileCreationError => "No se pudo crear el archivo de la branch.",
            GitError::BranchFileWriteError => "No se pudo escribir en el archivo de la branch.",
            GitError::DeleteBranchError => "No se pudo borrar la branch",
            GitError::BranchDoesntExistError => "Ruta especificada no concordó con ningún archivo conocido por git",
            GitError::BranchNotFoundError => "fatal: la rama no existe",
            GitError::HashObjectInvalid => "Hash del Objeto inválido",
            GitError::DecompressionFailed => "Fallo al descomprimir el archivo",
            GitError::CreateFileError => "Fallo al crear el archivo",
            GitError::WriteFileError => "Fallo al escribir en el archivo",
            GitError::CopyFileError => "Fallo al copiar el archivo",
            GitError::CreateDirError => "Fallo al crear el directorio",
            GitError::RemoteDoesntExistError => "fatal: el repositorio remoto no existe",
            GitError::WriteStreamError => "Falló al enviar datos al socket",
            GitError::SendCommandError => "Falló al enviar el comando",
            GitError::HeaderPackFileReadError => "Falló al leer el header del packfile recibo del servidor",
            GitError::ReadDirError => "Falló al leer el directorio",
            GitError::DirEntryError => "Falló al obtener la entrada del directorio",
            GitError::HeadBranchError => "No se pudo obtener la rama HEAD",
            GitError::VisitDirectoryError => "No se pudo recorrer el directorio",
            GitError::GetHashError => "No se pudo obtener el hash del objeto",
            GitError::PathToStringError => "No se pudo convertir el path a str",
            GitError::InvalidObjectType => "Fallo al leer en el header, se leyo un tipo de objeto invalido",
            GitError::InvalidObjectLength => "Fallo al leer en el header, se leyo una longitud de objecto invalido",
            GitError::NonGitCommandError => "Solo se aceptan comandos git. Usage: git <command> -options",
            GitError::CommandNotRecognizedError => "El comando no es reconocido por git",
            GitError::InvalidArgumentCountAddError => "Número de argumentos inválido para el comando add.\nUsar: git add <file name>",
            GitError::DirectoryOpenError => "No se pudo abrir el directorio",
            GitError::InvalidArgumentCountBranchError => "Número de argumentos inválido para el comando branch.",
            GitError::InvalidArgumentCountCatFileError => "Número de argumentos inválido para el comando cat-file.\nUsar: git cat-file <flag> <object hash>",
            GitError::FlagCatFileNotRecognizedError => "Flag no reconocida para el comando cat-file",
            GitError::InvalidArgumentCountCheckoutError => "Número de argumentos inválido para el comando checkout.",
            GitError::FlagCheckoutNotRecognisedError => "Flag no reconocida para el comando checkout",
            GitError::InvalidArgumentCountCloneError => "Número de argumentos inválido para el comando clone.\nUsar: git clone <url> <path>",
            GitError::InvalidArgumentCountCommitError => "Número de argumentos inválido para el comando commit.\nUsar: git commit -m <message>",
            GitError::FlagCommitNotRecognizedError => "Flag no reconocida para el comando commit",
            GitError::InvalidArgumentCountFetchError => "Número de argumentos inválido para el comando fetch.\nUsar: git fetch <remote name>",
            GitError::InvalidArgumentCountHashObjectError => "Número de argumentos inválido para el comando hash-object.\nUsar: git hash-object <file name>",
            GitError::FlagHashObjectNotRecognizedError => "Flag no reconocida para el comando hash-object",
            GitError::InvalidArgumentCountInitError => "Número de argumentos inválido para el comando init.\nUsar: git init",
            GitError::InvalidArgumentCountStatusError => "Número de argumentos inválido para el comando status.\nUsar: git status",
            GitError::CloneMissingRepoError => "Use: git clone <repositorio>",
            GitError::InvalidArgumentCountLogError => "Número de argumentos inválido para el comando log.\nUsar: git log",
            GitError::InvalidArgumentCountMergeError => "Número de argumentos inválido para el comando merge.\nUsar: git merge <branch name>",
            GitError::InvalidArgumentCountPullError => "Número de argumentos inválido para el comando pull.\nUsar: git pull <remote name> <branch name>",
            GitError::InvalidArgumentCountPushError => "Número de argumentos inválido para el comando push.\nUsar: git push <remote name> <branch name>",
            GitError::InvalidArgumentCountRemoteError => "Número de argumentos inválido para el comando remote.\nUsar: git remote <flag> <remote name> <url>",
            GitError::InvalidArgumentCountRmError => "Número de argumentos inválido para el comando rm.\nUsar: git rm <file name>",
            GitError::PackObjectReadError => "No se pudo leer el objeto del packfile",
            GitError::LogOutputOpenError => "No se pudo abrir el archivo de log",
            GitError::LogOutputSyncError => "Error al sincronizar los datos al archivo de registro",
        }
    }
}
